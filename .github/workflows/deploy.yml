name: Deploy to Render

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment for frontend
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production-frontend',
            description: 'Deploy frontend to Render',
            auto_merge: false,
            required_contexts: []
          });
          
          console.log('Frontend deployment created:', deployment.data.id);
          
          // Mark deployment as in progress
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'in_progress',
            description: 'Deploying to Render...',
            environment_url: 'https://smart-voice-guard-frontend.onrender.com'
          });
          
          // Wait a bit for Render to start deployment
          await new Promise(resolve => setTimeout(resolve, 30000));
          
          // Mark as success (in real scenario, you'd check Render API)
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            description: 'Successfully deployed to Render',
            environment_url: 'https://smart-voice-guard-frontend.onrender.com'
          });
    
    - name: Create deployment for backend
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production-backend',
            description: 'Deploy backend to Render',
            auto_merge: false,
            required_contexts: []
          });
          
          console.log('Backend deployment created:', deployment.data.id);
          
          // Mark deployment as in progress
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'in_progress',
            description: 'Deploying API to Render...',
            environment_url: 'https://smart-voice-guard-api.onrender.com'
          });
          
          // Wait a bit for Render to start deployment
          await new Promise(resolve => setTimeout(resolve, 30000));
          
          // Mark as success
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            description: 'Successfully deployed API to Render',
            environment_url: 'https://smart-voice-guard-api.onrender.com'
          });